{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/business/index.js","webpack:///./src/business/v1.0.0/utils.js","webpack:///./src/models/index.js","webpack:///./src/models/seed.js","webpack:///external \"mongoose\"","webpack:///external \"body-parser\"","webpack:///./src/middleware.js","webpack:///external \"express-routes-versioning\"","webpack:///./src/controllers/v1.0.0/user.js","webpack:///./src/business/v1.0.0/user.js","webpack:///./src/controllers/v1.0.0/manage.js","webpack:///./src/controllers/index.js","webpack:///./src/router.js","webpack:///external \"path\"","webpack:///external \"express\"","webpack:///external \"os\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"fs\"","webpack:///external \"crypto\"","webpack:///./src/models/mongodb/record.js","webpack:///./src/models/mysql/user.js","webpack:///external \"sequelize\"","webpack:///external \"dotenv\"","webpack:///external \"cluster\"","webpack:///./main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","v1_0_0","user","utils","__dirname","crypto","fs","jwt","db","encrypt","to_encrypt","map","element","index","cipher","createCipher","process","env","ALGORITHM","KEY","update","Buffer","from","final","error","decrypt","to_decrypt","decipher","createDecipher","createToken","obj","client_address","Promise","resolve","reject","private_key","readFileSync","toString","undefined","code","msg","payload","id","options","expiresIn","algorithm","subject","sign","token","message","validateToken","public_key","algorithms","verify","User","findById","then","deleteAll","sequelize","query","raw","truncate","Record","remove","testSeed","mongoose","Sequelize","mongo_uri","mysql_uri","operatorsAliases","$eq","Op","eq","$ne","ne","$gte","gte","$gt","gt","$lte","lte","$lt","lt","$not","not","$in","in","$notIn","notIn","$is","is","$like","like","$notLike","notLike","$iLike","iLike","$notILike","notILike","$regexp","regexp","$notRegexp","notRegexp","$iRegexp","iRegexp","$notIRegexp","notIRegexp","$between","between","$notBetween","notBetween","$overlap","overlap","$contains","contains","$contained","contained","$adjacent","adjacent","$strictLeft","strictLeft","$strictRight","strictRight","$noExtendRight","noExtendRight","$noExtendLeft","noExtendLeft","$and","and","$or","or","$any","any","$all","all","$values","values","$col","col","connect","logging","keys","forEach","modelName","associate","connection","seed","count","where","admin","encrypted","bulkCreate","email","password","users","insertMany","datetime","doc","create","require","app","bodyParser","use","urlencoded","extended","json","req","res","next","header","method","send","headers","authorization","remoteAddress","client","business","register","body","status","login","changePassword","constructor","old_password","new_password","result","test","new_user","findOne","user_id","findByEmail","destroyAll","success","testDb","manage","controllers","versioning","post","1.0.0","2.0.0","schema","Schema","type","Number","required","Date","default","now","versionKey","model","DataTypes","define","UUID","defaultValue","UUIDV4","primaryKey","STRING","allowNull","unique","args","BOOLEAN","scopes","profile","attributes","exclude","underscored","models","cluster","config","isMaster","sync","console","log","cpus","length","fork","on","worker","signal","pid","exit","express","path","router","middleware","static","port","PORT","listen"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","module.exports.v1_0_0 = {\r\n    'user': require('./v1.0.0/user'),\r\n    'utils': require('./v1.0.0/utils'),\r\n};","var crypto = require(\"crypto\"),\r\n  fs = require(\"fs\"),\r\n  jwt = require('jsonwebtoken'),\r\n  db = require('../../models/index');\r\n\r\nexports.encrypt = function (to_encrypt) {\r\n  try {\r\n    return {\r\n      value: to_encrypt.map((element, index) => {\r\n        let cipher = crypto.createCipher(process.env.ALGORITHM, process.env.KEY);\r\n        return element = cipher.update(Buffer.from(element), 'utf8', 'hex') + cipher.final('hex');\r\n      }), error: null\r\n    };\r\n  } catch (error) {\r\n    return { value: null, error: error };\r\n  }\r\n}\r\nexports.decrypt = function (to_decrypt) {\r\n  let decipher = crypto.createDecipher(process.env.ALGORITHM, process.env.KEY);\r\n  return decipher.update(to_decrypt, 'hex', 'utf8') + decipher.final('utf8');\r\n}\r\n\r\nexports.createToken = function (obj, client_address) {\r\n  return new Promise((resolve, reject) => {\r\n    let private_key = fs.readFileSync(__dirname + '/../../keys/key.pem').toString();\r\n    if (private_key === undefined) reject({ code: 500, msg: \"error on load private key\" });\r\n\r\n    let payload = {\r\n      id: obj.id\r\n    };\r\n    let options = {\r\n      expiresIn: \"8h\",\r\n      algorithm: \"RS256\",\r\n      subject: client_address\r\n    };\r\n    jwt.sign(payload, private_key, options, function (error, token) {\r\n      if (error) { reject({ code: 500, msg: error.message }); }\r\n      resolve(token);\r\n    });\r\n  });\r\n}\r\n\r\nexports.validateToken = function (token, client_address) {\r\n  return new Promise((resolve, reject) => {\r\n    let public_key = fs.readFileSync(__dirname + '/../../keys/cert.pem').toString();\r\n    if (public_key === undefined) reject(\"error on load public key\");\r\n\r\n    let options = {\r\n      algorithms: [\"RS256\"],\r\n      subject: client_address\r\n    };\r\n\r\n    jwt.verify(token, public_key, options, function (error, payload) {\r\n      if (error) reject({ code: 500, msg: error.message });\r\n      db.User.findById(payload.id).then(\r\n        obj => resolve(obj),\r\n        error => reject({ code: 500, msg: error.message })\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\n\r\n// JUST TO DEVELOPMENT\r\nexports.deleteAll = function () {\r\n  return new Promise((resolve, reject) => {\r\n    db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', { raw: true }).then(() => {\r\n      db.User.truncate().then(() => {\r\n        db.Record.remove({}, () => {\r\n          db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', { raw: true }).then(\r\n            () => resolve(),\r\n            error => reject(error));\r\n        });\r\n      }, error => reject(error));\r\n    }, error => reject(error));\r\n  });\r\n}\r\n\r\nexports.testSeed = function () {\r\n  return new Promise((resolve, reject) => {\r\n    require('../../models/seed').testSeed(db).then(\r\n      () => resolve(),\r\n      error => reject(error));\r\n  });\r\n}","var mongoose = require('mongoose'),\r\n    Sequelize = require('sequelize');\r\n\r\nvar mongo_uri = \"\", mysql_uri = \"\";\r\n\r\nif (process.env.NODE_ENV===\"production\") {\r\n    mongo_uri = 'mongodb://localhost:27017/myproject';\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/node';\r\n}else{\r\n    mongo_uri = 'mongodb://localhost:27017/test';\r\n    mysql_uri = 'mysql://api:123qwe@localhost:3306/test';\r\n}\r\n\r\nconst operatorsAliases = {\r\n    $eq: Sequelize.Op.eq,\r\n    $ne: Sequelize.Op.ne,\r\n    $gte: Sequelize.Op.gte,\r\n    $gt: Sequelize.Op.gt,\r\n    $lte: Sequelize.Op.lte,\r\n    $lt: Sequelize.Op.lt,\r\n    $not: Sequelize.Op.not,\r\n    $in: Sequelize.Op.in,\r\n    $notIn: Sequelize.Op.notIn,\r\n    $is: Sequelize.Op.is,\r\n    $like: Sequelize.Op.like,\r\n    $notLike: Sequelize.Op.notLike,\r\n    $iLike: Sequelize.Op.iLike,\r\n    $notILike: Sequelize.Op.notILike,\r\n    $regexp: Sequelize.Op.regexp,\r\n    $notRegexp: Sequelize.Op.notRegexp,\r\n    $iRegexp: Sequelize.Op.iRegexp,\r\n    $notIRegexp: Sequelize.Op.notIRegexp,\r\n    $between: Sequelize.Op.between,\r\n    $notBetween: Sequelize.Op.notBetween,\r\n    $overlap: Sequelize.Op.overlap,\r\n    $contains: Sequelize.Op.contains,\r\n    $contained: Sequelize.Op.contained,\r\n    $adjacent: Sequelize.Op.adjacent,\r\n    $strictLeft: Sequelize.Op.strictLeft,\r\n    $strictRight: Sequelize.Op.strictRight,\r\n    $noExtendRight: Sequelize.Op.noExtendRight,\r\n    $noExtendLeft: Sequelize.Op.noExtendLeft,\r\n    $and: Sequelize.Op.and,\r\n    $or: Sequelize.Op.or,\r\n    $any: Sequelize.Op.any,\r\n    $all: Sequelize.Op.all,\r\n    $values: Sequelize.Op.values,\r\n    $col: Sequelize.Op.col\r\n};\r\n\r\n// Create a new conntection to MongoDB server\r\nmongoose.connect(mongo_uri);\r\n// Create a new connection to MySQL server\r\nvar sequelize = new Sequelize(mysql_uri, { operatorsAliases: operatorsAliases, logging: false });\r\n\r\nconst db = {\r\n    'User': require('./mysql/user')(sequelize, Sequelize),\r\n\r\n    'Record': require('./mongodb/record')\r\n}\r\n\r\nObject.keys(db).forEach(modelName => {\r\n    if (db[modelName].associate) db[modelName].associate(db);\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.mongoose = mongoose.connection;\r\n\r\nmodule.exports = db;","var utils = require('../business/v1.0.0/utils');\r\n\r\nmodule.exports.seed = (db) => {\r\n  return new Promise((resolve, reject) => {\r\n\r\n    db.User.count({ where: { admin: true } }).then(\r\n      count => {\r\n        if (count < 1) {\r\n          let encrypted = utils.encrypt([\"admin@a.aa\", \"user2@a.aa\", \"123qweASD\"]);\r\n          if (!encrypted.error) {\r\n\r\n            db.User.bulkCreate([\r\n              { \"email\": encrypted.value[0], \"admin\": true, \"password\": encrypted.value[2] },\r\n              { \"email\": encrypted.value[1], \"password\": encrypted.value[2] }\r\n            ]).then(\r\n              users => db.Record.insertMany([\r\n                { value: \"20\", datetime: \"2018-03-08T09:43:40.000Z\" },\r\n                { value: \"22\", datetime: \"2018-03-08T09:47:28.000Z\" },\r\n                { value: \"19\", datetime: \"2018-03-08T09:53:47.000Z\" }\r\n              ], (error, doc) => {\r\n                if (error) reject(error);\r\n                resolve();\r\n              }),\r\n              error => reject(error));\r\n\r\n          } else reject(encrypted.error);\r\n        } else resolve();\r\n      }, error => reject(error));\r\n  });\r\n\r\n}\r\n\r\nmodule.exports.testSeed = (db) => {\r\n  return new Promise((resolve, reject) => {\r\n    let encrypted = utils.encrypt([\"admin@a.aa\", \"123qweASD\"]);\r\n    if (!encrypted.error) {\r\n      db.User.create({ \"email\": encrypted.value[0], \"admin\": true, \"password\": encrypted.value[1] }).then(\r\n        () => resolve(),\r\n        error => reject(error));\r\n    } else reject(encrypted.error);\r\n  });\r\n}","module.exports = require(\"mongoose\");","module.exports = require(\"body-parser\");","// MIDDLEWARE FOR ALL REQUESTS\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n  var bodyParser = require('body-parser'),\r\n    utils = require('./business/index').v1_0_0.utils;\r\n\r\n  app.use(bodyParser.urlencoded({ extended: true }));\r\n  app.use(bodyParser.json());\r\n  app.use((req, res, next) => {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization, Accept-Version\");\r\n    res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\r\n    res.header('Access-Control-Allow-Credentials', true);\r\n    if (process.env.NODE_ENV === \"development\") console.log(\"\\x1b[36m\" + req.method, req.url + \"\\x1b[0m\");\r\n\r\n    if (req.method === \"OPTIONS\") {\r\n      return res.send(200);\r\n    }\r\n    if (req.headers.authorization) {\r\n      utils.validateToken(req.headers.authorization, req.connection.remoteAddress).then(\r\n        client => {\r\n          if (client) req.client = client;\r\n          else req.client = null;\r\n          next();\r\n        },\r\n        error => { req.client = null; next(); });\r\n    } else { req.client = null; next(); }\r\n  });\r\n}","module.exports = require(\"express-routes-versioning\");","var business = require('../../business/index').v1_0_0;\r\n/**\r\n * @apiDefine auth\r\n * \r\n * @apiHeader Accept-Version=\"1.0.0\"\r\n * @apiHeader Content-Type=\"application/json\"\r\n * @apiError {number} status http status code: 500 to business logic errors and 401 to unauthorized\r\n * @apiError {string} error error description\r\n */\r\n\r\n/**\r\n * @api {post} /register 01) Register user\r\n * @apiGroup Authentication\r\n * @apiName userRegister\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.register = function (req, res) {\r\n    business.user.register(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token, user: user.id }),\r\n                error => res.status(error.code).send(error.msg));\r\n        },\r\n        error => res.status(500).send(error.msg));\r\n}\r\n\r\n/**\r\n * @api {post} /login 02) Login user\r\n * @apiGroup Authentication\r\n * @apiName userLogin\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiParam {string} email valid email\r\n * @apiParam {string} password must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\r\n * @apiSuccess {string} token jwt valid for 8 hours and must be placed at \"Authorization\" header\r\n */\r\nexports.login = function (req, res) {\r\n    business.user.login(req.body.email, req.body.password).then(\r\n        user => {\r\n            business.utils.createToken(user, req.connection.remoteAddress).then(\r\n                token => res.status(200).json({ token: token, user: user.id }),\r\n                error => res.status(error.code).send(error.msg));\r\n        },\r\n        error => res.status(error.code).send(error.msg));\r\n}\r\n\r\n/**\r\n * @api {post} /chpass 03) Change password\r\n * @apiGroup Authentication\r\n * @apiName changePassword\r\n * @apiVersion 1.0.0\r\n * @apiUse auth\r\n * @apiHeader Authorization=\"< token >\"\r\n * @apiParam {string} old_password old password\r\n * @apiParam {string} new_password new password\r\n * @apiSuccess {boolean} result return true if was sucessfuly updated\r\n */\r\nexports.changePassword = function (req, res) {\r\n    if (req.client && req.client.constructor.name === \"User\") {\r\n        business.user.changePassword(req.client.id, req.body.old_password, req.body.new_password).then(\r\n            () => res.status(200).json({ result: true }),\r\n            error => res.status(error.code).send(error.msg));\r\n    } else {\r\n        res.status(401).send(\"Unauthorized\");\r\n    }\r\n}","var db = require('../../models/index'),\r\n    utils = require('./utils');\r\n\r\nexports.register = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(password)) {\r\n            if (/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/.test(email)) {\r\n                let encrypted = utils.encrypt([email, password]);\r\n                if (!encrypted.error) {\r\n                    db.User.create({ email: encrypted.value[0], password: encrypted.value[1] }).then(\r\n                        new_user => resolve(new_user),\r\n                        error => reject({ code: 500, msg: error.message }))\r\n                } else reject({ code: 500, msg: encrypted.error.message });\r\n            } else reject({ code: 500, msg: \"invalid email\" });\r\n        } else reject({ code: 500, msg: \"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\" });\r\n    });\r\n}\r\n\r\nexports.login = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        let encrypted = utils.encrypt([email, password]);\r\n        if (!encrypted.error) {\r\n            db.User.findOne({ where: { email: encrypted.value[0], password: encrypted.value[1] } }).then(\r\n                user => {\r\n                    if (user) { resolve(user); }\r\n                    else { reject({ code: 500, msg: \"email and password don't match\" }); }\r\n                }, error => reject({ code: 500, msg: encrypted.error.message }));\r\n        } else reject({ code: 500, msg: error.message });\r\n    });\r\n}\r\n\r\nexports.changePassword = function (user_id, old_password, new_password) {\r\n    return new Promise((resolve, reject) => {\r\n        if (/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d$@$!%*#?&-.]{8,}$/.test(new_password)) {\r\n            let encrypted = utils.encrypt([old_password, new_password]);\r\n            if (!encrypted.error) {\r\n                db.User.findOne({ where: { id: user_id, password: encrypted.value[0] } }).then(\r\n                    user => {\r\n                        if (user) {\r\n                            user.update({ password: encrypted.value[1] }).then(\r\n                                () => resolve(),\r\n                                error => reject({ code: 500, msg: error.message }));\r\n                        } else reject({ code: 500, msg: \"old password don't match\" });\r\n                    }, error => reject({ code: 500, msg: error.message }));\r\n            } else reject({ code: 500, msg: encrypted.error.message });\r\n        } else reject({ code: 500, msg: \"invalid password, must have at least one uppercase letter, one lowercase, one digit and a minimum 8 characters\" });\r\n    });\r\n}\r\n\r\nexports.findByEmail = function (email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        let encrypted = utils.encrypt([email]);\r\n        if (!encrypted.error) {\r\n            db.User.findOne({ where: { email: encrypted.value[0] } }).then(\r\n                user => {\r\n                    if (user) { resolve(user); }\r\n                    else { reject({ code: 500, msg: \"user not registered\" }); }\r\n                }, error => reject({ code: 500, msg: encrypted.error.message }));\r\n        } else reject({ code: 500, msg: error.message });\r\n    });\r\n}","var business = require('../../business/index').v1_0_0;\r\n\r\nexports.destroyAll = function (req, res) {\r\n    business.utils.deleteAll().then(\r\n        () => res.status(200).json({ success: true }),\r\n        error => res.status(500).send(error.msg)\r\n    );\r\n}\r\n\r\nexports.testDb = function (req, res) {\r\n    business.utils.deleteAll().then(\r\n        () => business.utils.testSeed().then(\r\n            res.status(200).json({ success: true }),\r\n            error => res.status(500).send(error.msg)),\r\n        error => res.status(500).send(error.msg));\r\n}","module.exports.v1_0_0 = {\r\n    'manage':require('./v1.0.0/manage'),\r\n    'user': require('./v1.0.0/user')\r\n}","// ROUTES FOR OUR API\r\n// =============================================================================\r\nmodule.exports = (app) => {\r\n    var controllers = require('./controllers/index'),\r\n        versioning = require('express-routes-versioning')();\r\n\r\n    app\r\n        /*________________________________________________check\r\n        *_____________________USERS_______________________\r\n        *_________________________________________________*/\r\n        .post('/register', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.register,\r\n            \"2.0.0\": (req, res) => res.json({ error: 'invalid version' })\r\n        }))\r\n        .post('/login', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.login,\r\n        }))\r\n        .post('/chpass', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.user.changePassword,\r\n        }))\r\n        /*________________________________________________\r\n        *_____________________TRASH_______________________\r\n        *_________________________________________________*/\r\n        .get('/destroy', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.destroyAll\r\n        }))\r\n        .get('/testdb', versioning({\r\n            \"1.0.0\": controllers.v1_0_0.manage.testDb\r\n        }))\r\n\r\n\r\n    app.all('*', (req, res) => {\r\n        res.status(404).json({ 'message': 'Route could not be found' });\r\n    });\r\n};","module.exports = require(\"path\");","module.exports = require(\"express\");","module.exports = require(\"os\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"fs\");","module.exports = require(\"crypto\");","var mongoose = require('mongoose');\r\nvar schema = new mongoose.Schema({\r\n    value: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    datetime: {\r\n        type: Date,\r\n        default: Date.now()\r\n    }\r\n}, { versionKey: false });\r\n\r\nmodule.exports = mongoose.model('Record', schema);","'use strict';\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  var User = sequelize.define('User', {\r\n    id: {\r\n      type: DataTypes.UUID,\r\n      defaultValue: DataTypes.UUIDV4,\r\n      primaryKey: true\r\n    },\r\n    email: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      unique: {\r\n        args: true,\r\n        msg: 'email already registered'\r\n      },\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    admin: {\r\n      type: DataTypes.BOOLEAN,\r\n      defaultValue: false\r\n    }\r\n  }, {\r\n      scopes: {\r\n        profile: { attributes: { exclude: ['password'] } }\r\n      },\r\n      underscored: true\r\n    });\r\n\r\n  User.associate = function (models) {\r\n    // models.User.belongsToMany(models.Table, { through: models.UserTable });\r\n  };\r\n\r\n  return User;\r\n};","module.exports = require(\"sequelize\");","module.exports = require(\"dotenv\");","module.exports = require(\"cluster\");","// server.js\r\n\r\n// BASE SETUP\r\n// =============================================================================\r\nvar cluster = require('cluster');\r\n// Get the env variables from .env\r\nrequire('dotenv').config();\r\n\r\nif (cluster.isMaster) {\r\n    var db = require('./src/models/index');\r\n    db.sequelize.sync().then(\r\n        () => {\r\n            require('./src/models/seed').seed(db).then(\r\n                () => {\r\n                    console.log('\\x1b[32m%s\\x1b[0m.', '(PLAIN) Connection established with MongoDB and MySQL');\r\n\r\n                    var cpus = require('os').cpus().length\r\n                    console.log('Master cluster setting up ' + cpus + ' workers...');\r\n\r\n                    for (var i = 0; i < cpus; i++) {\r\n                        cluster.fork();\r\n                    }\r\n\r\n                    cluster.on('exit', function (worker, code, signal) {\r\n                        console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal + '-> Starting a new worker');\r\n                        cluster.fork();\r\n                    });\r\n                },\r\n                error => {\r\n                    console.log('Unable to seed Databases.', error.message);\r\n                    process.exit(1);\r\n                }\r\n            )\r\n        },\r\n        error => {\r\n            console.log('Unable to connect to Databases.', error);\r\n            process.exit(1);\r\n        });\r\n} else {\r\n    // call the packages we need\r\n    var express = require('express'),           // call express\r\n        // https = require('https'),\r\n        // fs = require(\"fs\"),\r\n        path = require('path'),\r\n        router = require('./src/router'),\r\n        middleware=require('./src/middleware');\r\n\r\n    // START THE SERVER\r\n    // =============================================================================\r\n    // define our app using express\r\n    var app = express();\r\n\r\n    // Present SPA\r\n    app.use('/', express.static(path.resolve(__dirname, 'public')));\r\n    // Present Documentation\r\n    app.use('/docs', express.static(path.resolve(__dirname, 'docs')));\r\n    // middleware routes\r\n    middleware(app);\r\n    // Register routes\r\n    router(app);\r\n\r\n    // Define the listenning port\r\n    var port = process.env.PORT || 8080;\r\n    // start http server\r\n    app.listen(port, () => {\r\n        // https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\r\n        console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server http listening on port', port);\r\n    });\r\n\r\n    // //set options to https\r\n    // const options = {\r\n    //     key: fs.readFileSync(__dirname + \"/app/keys/https_key.pem\"),\r\n    //     cert: fs.readFileSync(__dirname + \"/app/keys/https_cert.pem\"),\r\n    //     ca: fs.readFileSync(__dirname + \"/app/keys/https_ca.pem\"),\r\n    //     dhparam: fs.readFileSync(__dirname + \"/app/keys/https_dhparam.pem\")\r\n    // };\r\n    // // start https server\r\n    // https.createServer(options, app).listen(8080, () => {\r\n    //     console.log('\\x1b[32m%s %d\\x1b[0m.', '(PLAIN) Server https listening on port', port);\r\n    // });\r\n}"],"sourceRoot":""}